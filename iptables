-----二-----
#查看对应表的所有规则 -t指要操作的表（默认为filter表）-L表示列出规则（查看）-n表示不解析ip地址 
#-v表示varbose表示详细的，冗长的（显示详细信息） -x用来显示计数器的精确值（正常情况下超过一定数值会加单位K）
iptables -t 表名 -nvxL
#查看表的所有规则，并显示规则的序号，此选项为长选项，不能与其他短选项合并，但是可以简写--line 同样不可于短选项合并
iptables --line-numbers -t 表名 -L
例：iptables --line -t filter -nvxl INPUT
查看filter表中的INPUT规则 （显示序号，不解析ip，显示计算器精确数值）
-----三-----
#在链的尾部添加一条规则，-A是在对应链的末尾进行添加
iptables -t 表名 -A 链名 匹配条件 -j 动作
例：iptables -t filter -A INPUT -s 192.168.43.134 -j DROP
#在链的首部添加一条规则，-I是在对应链的开头添加规则
iptables -t 表名 -I 链名 匹配条件 -j 动作
例：iptables -t filter -I INPUT -s 192.168.43.134 -j ACCEPT
#在链的指定位置添加一条规则
iptables -t 表名 -I 链名 规则序号 匹配条件 -j 动作
例：iptables -t filter -I INPUT 5 -s 192.168.43.134 -j REJECT
#设置链的默认策略（默认动作）
iptables -t 表名 -P 链名 动作
例：iptables -t filter -P FORWARD ACCEPT（将filter表中FORWARD链的默认策略设置为ACCEPT）
#按照序号删除规则，删除指定表的指定链的指定规则.-D选项表示删除对应链中的规则
iptables -t 表名 -D 链名 规则序号
例：iptables -t filter -D INPUT 3（删除filter表中INPUT链中序号为3的规则）
#按照具体的匹配条件于动作删除规则，删除指定表的指定链的指定规则
iptables -t 表名 -D 链名 匹配条件 -j 动作
例：iptables -t filter -D INPUT -s 192.168.43.134 -j DROP（删除filter表中INPUT链中源地址为192...并且动作为DROP的规则）
#删除指定表指定链的所有规则 -F选项表示清空对应链的规则（三思）
iptables -t 表明 -F 链名
例：iptables -t filter -F INPUT
#修改指定表中指定链的指定规则 -R表示修改对应链中的规则 使用-R是要同时指定对应的链以及规则对应的序号，并且规则中原有的匹
配条件不可省略（源IP，目标IP等）
iptables -t 表明 -R 链名 规则序号 规则原本的匹配条件 -j 动作
例：iptables -t filter -R INPUT 3 -s 192.168.43.134 -j ACCEPT（修改filter表中INPUT链的第三条规则，该这条规则的动作修改为
ACCEPT，-s 192.168.43.134为这条规则原本的匹配条件，如果省略，修改后的规则的源地址可能会变为0.0.0.0/0）
其他修改规则的方法：先通过编号删除规则，再在原编号位置添加一条规则
#修改指定表指定链的默认策略（默认动作），并非修改规则
iptables -t 表名 -P 链名 动作
例：iptables -t filter -P FORWARD ACCEPT
#保存规则命令，将iptables规则保存至/etc/sysconfig/iptables文件中
service iptables save
或 iptables-save > /etc/sysconfig/iptables
#重载规则，文件中的规则将会覆盖现有规则
iptables-restore < /etc/sysconfig/iptables
-----四-----
#-s用于匹配报文的源地址，-d用于匹配报文的目标地址，都可以同时指定多个源地址（目标地址），每个ip之间用逗号隔开
也可以指定为一个网段，！表示取反，以第三个例子为例，表示为除了源地址为192.168.43.1的ip地址，其他都允许访问
但是不代表192.168.43.1这个网址不能使用，因为没有这个地址可以匹配的规则，所有就用filter表下INPUT链的默认策略ACCEPT
例：
-s:
iptables -I INPUT -s 192.168.43.1,192.168.43.2 -j DROP
iptables -t filter -I INPUT -s 192.168.1.0/24 -j ACCEPT
iptables -I INPUT ! -s 192.168.43.1 -j ACCEPT ---------------第三个规则
-d:
iptables -t filter -I OUTPUT -d 192.168.1.111,192.168.1.118 -j DROP
iptables -t filter -I INPUT -d 192.168.1.0/24 -j ACCEPT
iptables -t filter -I INPUT ! -d 192.168.1.0/24 -j ACCEPT
#-p用于匹配报文的协议类型，centos6中可以匹配tcp、udp、udplite、icmp、esp、ah、sctp（centos7中还支持icmpv6、mh）
iptables -t filter -I INPUT -p tcp -s 192.168.1.146 -j ACCEPT
iptables -t filter -I INPUT ! -p udp -s 192.168.1.146 -j ACCEPT
#-i用于匹配报文是从哪个网卡接口流入本机的，由于匹配条件只是用于匹配报文流入的网卡地址，不能在OUTPUT,POSTROUTING使用
iptables -t filter -I INPUT -p icmp -i eth4 -j DROP
iptables -t filter -I INPUT -p icmp ! -i eth4 -j DROP
#-o用于匹配报文是从哪个网卡接口流出本机的，由于匹配条件只是用于匹配报文流出的网卡地址，不能在INPUT,PREROUTING使用
iptables -t filter -I OUTPUT -p icmp -o eth4 -j DROP
iptables -t filter -I OUTPUT -p icmp ! -o eth4 -j DROP
#tco扩展模块 -p tco -m tcp -sport（dport）sport用于匹配tcp协议报文的源端口，dport用于匹配tcp协议报文的目标端口，
都可以使用冒号指定一个连续的端口范围（当匹配报文协议类型的名称和扩展模块类型名称相同是，
可以省略-m 例如 -p tcp -m tcp ）
iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp --sport 22 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 22:25 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport :22 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 80: -j REJECT
iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp ! --sport 22 -j ACCEPT
#multiport扩展模块 -p tcp -m multiport -sports（dports）和sport（dport）区别在于可以指定离散的多个端口号，逗号分隔
iptables -t filter -I OUTPUT -d 192.168.1.146 -p udp -m multiport --sports 137,138 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport ! --dports 22,80 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 80:88 -j REJECT
iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80:88 -j REJECT
-----五-----
#iprange扩展模块 -src-range（指定连续的源地址范围）-dst-range（指定连续的目标地址范围）
iptables -t filter -I INPUT -m iprange --src-range 192.168.1.127-192.168.1.146 -j DROP
iptables -t filter -I OUTPUT -m iprange --dst-range 192.168.1.127-192.168.1.146 -j DROP
iptables -t filter -I INPUT -m iprange ! --src-range 192.168.1.127-192.168.1.146 -j DROP
#string扩展模块 
-timestart：指定时间范围的开始时间，不可取反
-timestop：指定时间范围的结束时间，不可取反
-weekdays：用于指定“星期几”，可取反
-monthdays：用于指定“几号”，可取反
-datestart：指定时期范围的开始日期，不可取反
-datestop：指定时间范围的结束时间，不可取反
iptables -t filter -I OUTPUT -p tcp --dport 80 -m time --timestart 09:00:00 --timestop 19:00:00 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 443 -m time --timestart 09:00:00 --timestop 19:00:00 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --weekdays 6,7 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --monthdays 22,23 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 80  -m time ! --monthdays 22,23 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --timestart 09:00:00 --timestop 18:00:00 --weekdays 6,7 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --weekdays 5 --monthdays 22,23,24,25,26,27,28 -j REJECT
iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --datestart 2017-12-24 --datestop 2017-12-27 -j REJECT
#connlimit模块
-connlimit-above：单独使用时，表示限制每个IP的链接数量
-connlimit-mask：不可单独使用，需要于above配合，表示可以针对“某类IP段内的一定数量的IP”进行连接数量的限制
iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT
iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 20 --connlimit-mask 24 -j REJECT
iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 10 --connlimit-mask 27 -j REJECT
#limit模块
--limit-burst：类比“令牌桶算法”，用于指定令牌桶中令牌的最大数量
--limit：类比“令牌桶”算法，用于指定令牌桶中生存新令牌的频率，可用时间单位（second，minute，hour，day）
iptables -t filter -I INPUT -p icmp -m limit --limit-burst 3 --limit 10/minute -j ACCEPT
iptables -t filter -A INPUT -p icmp -j REJECT
-----六-----
#-tcp-flags 用于匹配报文的tcp头的标志位
iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN -j REJECT
iptables -t filter -I OUTPUT -p tcp -m tcp --sport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN,ACK -j REJECT
iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags ALL SYN -j REJECT
iptables -t filter -I OUTPUT -p tcp -m tcp --sport 22 --tcp-flags ALL SYN,ACK -j REJECT
#--syn 用于匹配tcp新建连接的请求报文，相当于使用“-tcp flags SYN,RST,ACK,FIN SYN”
iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --syn -j REJECT
-----七-----
#udp扩展模块 -sport：匹配udp报文的源地址 -dport：匹配udp报文的目标地址
iptables -t filter -I INPUT -p udp -m udp --dport 137 -j ACCEPT
iptables -t filter -I INPUT -p udp -m udp --dport 137:157 -j ACCEPT
#icmp扩展模块 -icmp-type：匹配icmp报文的具体类型
iptables -t filter -I INPUT -p icmp -m icmp --icmp-type 8/0 -j REJECT
iptables -t filter -I INPUT -p icmp --icmp-type 8 -j REJECT
iptables -t filter -I OUTPUT -p icmp -m icmp --icmp-type 0/0 -j REJECT
iptables -t filter -I OUTPUT -p icmp --icmp-type 0 -j REJECT
iptables -t filter -I INPUT -p icmp --icmp-type "echo-request" -j REJECT
-----八-----
#state扩展模块 放行ESTABLISHED与RELATED状态的包
iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-----九-----
#黑名单白名单机制
黑名单机制：把所有人当做好人，只拒绝坏人
白名单机制：把所有人当做坏人，只放行好人
-----十-----
#创建自定义链
iptables -t filter -N IN_WEB
#引用自定义链
iptables -t filter -I INPUT -p tcp --dport 80 -j IN_WEB
#重命名自定义链
iptables -E IN_WEB WEB
#删除自定义链（需要满足两个条件1.自定义链没有被引用2.自定义链中没有任何规则）
iptables -X WEB
-----十一-----
#如果想要iptables作为网络防火墙，iptables所在主机开启核心转发功能，以便能够转发报文。
#使用如下命令查看当前主机是否已经开启了核心转发，0表示为开启，1表示已开启
cat /proc/sys/net/ipv4/ip_forward
#使用如下两种方法均可临时开启核心转发，立即生效，但是重启网络配置后会失效。
方法一：echo 1 > /proc/sys/net/ipv4/ip_forward
方法二：sysctl -w net.ipv4.ip_forward=1
#使用如下方法开启核心转发功能，重启网络服务后永久生效。
配置/etc/sysctl.conf文件（centos7中配置/usr/lib/sysctl.d/00-system.conf文件），在配置文件中将 net.ipv4.ip_forward设置为1
 
#由于iptables此时的角色为"网络防火墙"，所以需要在filter表中的FORWARD链中设置规则。
#可以使用"白名单机制"，先添加一条默认拒绝的规则，然后再为需要放行的报文设置规则。
#配置规则时需要考虑"方向问题"，针对请求报文与回应报文，考虑报文的源地址与目标地址，源端口与目标端口等。
#示例为允许网络内主机访问网络外主机的web服务与sshd服务。
iptables -A FORWARD -j REJECT
iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 80 -j ACCEPT
iptables -I FORWARD -d 10.1.0.0/16 -p tcp --sport 80 -j ACCEPT
iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 22 -j ACCEPT
iptables -I FORWARD -d 10.1.0.0/16 -p tcp --sport 22 -j ACCEPT
 
#可以使用state扩展模块，对上述规则进行优化，使用如下配置可以省略许多"回应报文放行规则"。
iptables -A FORWARD -j REJECT
iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 80 -j ACCEPT
iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 22 -j ACCEPT
iptables -I FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
！！
1.当测试网络防火墙时，默认前提为网络已经正确配置
2.当测试网络防火墙时，如果出现问题，请先确认主机防火墙规则的配置没有问题

-----十三总结-----
#如果想要NAT功能能够正常使用，需要开启Linux主机的核心转发功能
echo 1 > /proc/sys/net/ipv4/ip_forward
#SNAT相关操作，配置SNAT，可以隐藏网内主机的IP地址，也可以共享公网IP，访问互联网，如果只是共享IP的话，
只配置如下SNAT规则即可
iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 公网IP
如果公网IP是动态获取的，不是固定的，则可以使用MASQUERADE进行动态的SNAT操作，
如下命令表示将10.1网段的报文的源IP修改为eth0网卡中可用的地址
iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -o eth0 -j MASQUERADE
#DNAT相关操作 配置DNAT，可以通过公网IP访问局域网内的服务（理论上来说，只要配置DNAT规则，不需要对应的SNAT规则即可达到DNAT效果）
但是在测试DNAT时，对应SNAT规则也需要配置，才能正常DNAT，可以先尝试只配置DNAT规则，如果无法正常DNAT，再尝试添加对应的SNAT规则，
SNAT规则配置一条即可，DNAT规则需要根据实际情况配置不同的DNAT规则
iptables -t nat -I PREROUTING -d 公网IP -p tcp --dport 公网端口 -j DNAT --to-destination 私网IP:端口号
iptables -t nat -I PREROUTING -d 公网IP -p tcp --dport 8080 -j DNAT --to-destination 10.1.0.1:80
iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 公网IP
#在本机进行目标端口映射时可以使用REDIRECT动作
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
配置完成上述规则后，其他机器访问本机的80端口时，会被映射到8080端口
-----十四-----
总结
朱双印 https://www.zsythink.net/archives/1869




